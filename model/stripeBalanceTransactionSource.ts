/**
 * aha-nft-mgmt-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ApiListStripeTransferReversal } from './apiListStripeTransferReversal';
import { AuthorizationAuthorizationMethod } from './authorizationAuthorizationMethod';
import { AuthorizationRequestHistory } from './authorizationRequestHistory';
import { AuthorizationVerificationData } from './authorizationVerificationData';
import { ChargeAlternateStatementDescriptors } from './chargeAlternateStatementDescriptors';
import { ChargeBillingDetails } from './chargeBillingDetails';
import { ChargeLevel3 } from './chargeLevel3';
import { ChargeRadarOptions } from './chargeRadarOptions';
import { DisputeEvidence } from './disputeEvidence';
import { DisputeEvidenceDetails } from './disputeEvidenceDetails';
import { RefundNextAction } from './refundNextAction';
import { RefundReason } from './refundReason';
import { StripeApplicationFee } from './stripeApplicationFee';
import { StripeApplicationFeeOriginatingTransaction } from './stripeApplicationFeeOriginatingTransaction';
import { StripeBalanceTransaction } from './stripeBalanceTransaction';
import { StripeCharge } from './stripeCharge';
import { StripeChargeApplication } from './stripeChargeApplication';
import { StripeChargeApplicationFee } from './stripeChargeApplicationFee';
import { StripeChargeCustomer } from './stripeChargeCustomer';
import { StripeChargeFraudDetails } from './stripeChargeFraudDetails';
import { StripeChargeInvoice } from './stripeChargeInvoice';
import { StripeChargeOnBehalfOf } from './stripeChargeOnBehalfOf';
import { StripeChargeOutcome } from './stripeChargeOutcome';
import { StripeChargePaymentMethodDetails } from './stripeChargePaymentMethodDetails';
import { StripeChargeRefunds } from './stripeChargeRefunds';
import { StripeChargeReview } from './stripeChargeReview';
import { StripeChargeShipping } from './stripeChargeShipping';
import { StripeChargeSourceTransfer } from './stripeChargeSourceTransfer';
import { StripeChargeTransferData } from './stripeChargeTransferData';
import { StripeConnectCollectionTransfer } from './stripeConnectCollectionTransfer';
import { StripeDispute } from './stripeDispute';
import { StripeFeeRefund } from './stripeFeeRefund';
import { StripeFeeRefundBalanceTransaction } from './stripeFeeRefundBalanceTransaction';
import { StripeFeeRefundFee } from './stripeFeeRefundFee';
import { StripeIssuingAuthorization } from './stripeIssuingAuthorization';
import { StripeIssuingAuthorizationNetworkData } from './stripeIssuingAuthorizationNetworkData';
import { StripeIssuingAuthorizationPendingRequest } from './stripeIssuingAuthorizationPendingRequest';
import { StripeIssuingDispute } from './stripeIssuingDispute';
import { StripeIssuingDisputeTransaction } from './stripeIssuingDisputeTransaction';
import { StripeIssuingTransaction } from './stripeIssuingTransaction';
import { StripeIssuingTransactionAmountDetails } from './stripeIssuingTransactionAmountDetails';
import { StripeIssuingTransactionAuthorization } from './stripeIssuingTransactionAuthorization';
import { StripeIssuingTransactionCard } from './stripeIssuingTransactionCard';
import { StripeIssuingTransactionCardholder } from './stripeIssuingTransactionCardholder';
import { StripeIssuingTransactionDispute } from './stripeIssuingTransactionDispute';
import { StripeIssuingTransactionPurchaseDetails } from './stripeIssuingTransactionPurchaseDetails';
import { StripeIssuingTransactionTreasury } from './stripeIssuingTransactionTreasury';
import { StripePayout } from './stripePayout';
import { StripePayoutOriginalPayout } from './stripePayoutOriginalPayout';
import { StripePayoutReversedBy } from './stripePayoutReversedBy';
import { StripePlatformTaxFee } from './stripePlatformTaxFee';
import { StripeRefund } from './stripeRefund';
import { StripeRefundCharge } from './stripeRefundCharge';
import { StripeRefundFailureBalanceTransaction } from './stripeRefundFailureBalanceTransaction';
import { StripeRefundPaymentIntent } from './stripeRefundPaymentIntent';
import { StripeRefundSourceTransferReversal } from './stripeRefundSourceTransferReversal';
import { StripeRefundTransferReversal } from './stripeRefundTransferReversal';
import { StripeReserveTransaction } from './stripeReserveTransaction';
import { StripeTaxDeductedAtSource } from './stripeTaxDeductedAtSource';
import { StripeTopup } from './stripeTopup';
import { StripeTopupSource } from './stripeTopupSource';
import { StripeTransfer } from './stripeTransfer';
import { StripeTransferDestination } from './stripeTransferDestination';
import { StripeTransferDestinationPayment } from './stripeTransferDestinationPayment';
import { StripeTransferReversal } from './stripeTransferReversal';
import { StripeTransferReversalDestinationPaymentRefund } from './stripeTransferReversalDestinationPaymentRefund';
import { StripeTransferReversalSourceRefund } from './stripeTransferReversalSourceRefund';
import { StripeTransferReversalTransfer } from './stripeTransferReversalTransfer';
import { StripeTransferSourceTransaction } from './stripeTransferSourceTransaction';
import { TopupStatus } from './topupStatus';
import { TransactionMerchantData } from './transactionMerchantData';
import { TransactionWallet } from './transactionWallet';

/**
* The Stripe object to which this transaction is related.
*/
export class StripeBalanceTransactionSource {
    /**
    * Unique identifier for the object.
    */
    'id': string;
    /**
    * String representing the object\'s type. Objects of the same type share the same value.
    */
    'object': StripeBalanceTransactionSource.ObjectEnum;
    /**
    * The Connected account that incurred this charge.
    */
    'account': string;
    /**
    * Amount, in %s.
    */
    'amount': number;
    /**
    * Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued).
    */
    'amountRefunded': number;
    'application': StripeChargeApplication | null;
    'balanceTransaction': StripeFeeRefundBalanceTransaction | null;
    'charge': StripeRefundCharge | null;
    /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    */
    'created': number;
    /**
    * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    */
    'currency': string;
    /**
    * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    */
    'livemode': boolean;
    'originatingTransaction': StripeApplicationFeeOriginatingTransaction | null;
    /**
    * Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
    */
    'refunded': boolean;
    'refunds': StripeChargeRefunds | null;
    'alternateStatementDescriptors'?: ChargeAlternateStatementDescriptors;
    /**
    * Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made).
    */
    'amountCaptured': number;
    'applicationFee': StripeChargeApplicationFee | null;
    /**
    * The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
    */
    'applicationFeeAmount': number | null;
    /**
    * Authorization code on the charge.
    */
    'authorizationCode'?: string;
    'billingDetails': ChargeBillingDetails;
    /**
    * The full statement descriptor that is passed to card networks, and that is displayed on your customers\' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.
    */
    'calculatedStatementDescriptor': string | null;
    /**
    * If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
    */
    'captured': boolean;
    'customer': StripeChargeCustomer | null;
    /**
    * An arbitrary string attached to the object. Often useful for displaying to users.
    */
    'description': string | null;
    'destination': StripeTransferDestination | null;
    'dispute': StripeIssuingTransactionDispute | null;
    /**
    * Whether the charge has been disputed.
    */
    'disputed': boolean;
    'failureBalanceTransaction': StripeRefundFailureBalanceTransaction;
    /**
    * Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
    */
    'failureCode': string | null;
    /**
    * Message to user further explaining reason for top-up failure if available.
    */
    'failureMessage': string | null;
    'fraudDetails': StripeChargeFraudDetails | null;
    'invoice': StripeChargeInvoice | null;
    'level3'?: ChargeLevel3;
    /**
    * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    */
    'metadata': any | null;
    'onBehalfOf': StripeChargeOnBehalfOf | null;
    'outcome': StripeChargeOutcome | null;
    /**
    * `true` if the charge succeeded, or was successfully authorized for later capture.
    */
    'paid': boolean;
    'paymentIntent': StripeRefundPaymentIntent | null;
    /**
    * ID of the payment method used in this charge.
    */
    'paymentMethod': string | null;
    'paymentMethodDetails': StripeChargePaymentMethodDetails | null;
    'radarOptions'?: ChargeRadarOptions;
    /**
    * This is the email address that the receipt for this charge was sent to.
    */
    'receiptEmail': string | null;
    /**
    * This is the transaction number that appears on email receipts sent for this refund.
    */
    'receiptNumber': string | null;
    /**
    * This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
    */
    'receiptUrl': string | null;
    'review': StripeChargeReview | null;
    'shipping': StripeChargeShipping | null;
    'source': StripeTopupSource | null;
    'sourceTransfer': StripeChargeSourceTransfer | null;
    /**
    * Extra information about a top-up. This will appear on your source\'s bank statement. It must contain at least one letter.
    */
    'statementDescriptor': string | null;
    /**
    * Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that\'s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    */
    'statementDescriptorSuffix': string | null;
    'status': TopupStatus;
    'transfer': StripeTransferReversalTransfer;
    'transferData': StripeChargeTransferData | null;
    /**
    * A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
    */
    'transferGroup': string | null;
    /**
    * List of balance transactions associated with the dispute.
    */
    'balanceTransactions': Array<StripeBalanceTransaction> | null;
    'evidence': DisputeEvidence;
    'evidenceDetails': DisputeEvidenceDetails;
    /**
    * If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.
    */
    'isChargeRefundable': boolean;
    /**
    * Network-dependent reason code for the dispute.
    */
    'networkReasonCode'?: string | null;
    /**
    * Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
    */
    'reason': RefundReason | null;
    'fee': StripeFeeRefundFee;
    'amountDetails': StripeIssuingTransactionAmountDetails | null;
    /**
    * Whether the authorization has been approved.
    */
    'approved': boolean;
    'authorizationMethod': AuthorizationAuthorizationMethod;
    'card': StripeIssuingTransactionCard;
    'cardholder': StripeIssuingTransactionCardholder | null;
    /**
    * The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.
    */
    'merchantAmount': number;
    /**
    * The currency with which the merchant is taking payment.
    */
    'merchantCurrency': string;
    'merchantData': TransactionMerchantData;
    'networkData': StripeIssuingAuthorizationNetworkData | null;
    'pendingRequest': StripeIssuingAuthorizationPendingRequest | null;
    /**
    * History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined.
    */
    'requestHistory': Array<AuthorizationRequestHistory>;
    /**
    * List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
    */
    'transactions': Array<StripeIssuingTransaction>;
    'treasury'?: StripeIssuingTransactionTreasury | null;
    'verificationData': AuthorizationVerificationData;
    /**
    * The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
    */
    'wallet': TransactionWallet | null;
    'transaction': StripeIssuingDisputeTransaction;
    'authorization': StripeIssuingTransactionAuthorization | null;
    'purchaseDetails': StripeIssuingTransactionPurchaseDetails | null;
    /**
    * The type of tax (VAT).
    */
    'type': string;
    /**
    * Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.
    */
    'arrivalDate': number;
    /**
    * Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts).
    */
    'automatic': boolean;
    /**
    * The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.)
    */
    'method': string;
    'originalPayout': StripePayoutOriginalPayout | null;
    'reversedBy': StripePayoutReversedBy | null;
    /**
    * The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
    */
    'sourceType': string;
    'sourceTransaction': StripeTransferSourceTransaction | null;
    /**
    * If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.
    */
    'failureReason'?: string;
    /**
    * Email to which refund instructions, if required, are sent to.
    */
    'instructionsEmail'?: string;
    'nextAction'?: RefundNextAction;
    'sourceTransferReversal': StripeRefundSourceTransferReversal | null;
    'transferReversal': StripeRefundTransferReversal | null;
    /**
    * The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
    */
    'periodEnd': number;
    /**
    * The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
    */
    'periodStart': number;
    /**
    * The TAN that was supplied to Stripe when TDS was assessed
    */
    'taxDeductionAccountNumber': string;
    /**
    * Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.
    */
    'expectedAvailabilityDate': number | null;
    /**
    * Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
    */
    'amountReversed': number;
    'destinationPayment'?: StripeTransferDestinationPayment;
    'reversals': ApiListStripeTransferReversal;
    /**
    * Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
    */
    'reversed': boolean;
    'destinationPaymentRefund': StripeTransferReversalDestinationPaymentRefund | null;
    'sourceRefund': StripeTransferReversalSourceRefund | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "object",
            "baseName": "object",
            "type": "StripeBalanceTransactionSource.ObjectEnum"
        },
        {
            "name": "account",
            "baseName": "account",
            "type": "string"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "amountRefunded",
            "baseName": "amount_refunded",
            "type": "number"
        },
        {
            "name": "application",
            "baseName": "application",
            "type": "StripeChargeApplication"
        },
        {
            "name": "balanceTransaction",
            "baseName": "balance_transaction",
            "type": "StripeFeeRefundBalanceTransaction"
        },
        {
            "name": "charge",
            "baseName": "charge",
            "type": "StripeRefundCharge"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "number"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "livemode",
            "baseName": "livemode",
            "type": "boolean"
        },
        {
            "name": "originatingTransaction",
            "baseName": "originating_transaction",
            "type": "StripeApplicationFeeOriginatingTransaction"
        },
        {
            "name": "refunded",
            "baseName": "refunded",
            "type": "boolean"
        },
        {
            "name": "refunds",
            "baseName": "refunds",
            "type": "StripeChargeRefunds"
        },
        {
            "name": "alternateStatementDescriptors",
            "baseName": "alternate_statement_descriptors",
            "type": "ChargeAlternateStatementDescriptors"
        },
        {
            "name": "amountCaptured",
            "baseName": "amount_captured",
            "type": "number"
        },
        {
            "name": "applicationFee",
            "baseName": "application_fee",
            "type": "StripeChargeApplicationFee"
        },
        {
            "name": "applicationFeeAmount",
            "baseName": "application_fee_amount",
            "type": "number"
        },
        {
            "name": "authorizationCode",
            "baseName": "authorization_code",
            "type": "string"
        },
        {
            "name": "billingDetails",
            "baseName": "billing_details",
            "type": "ChargeBillingDetails"
        },
        {
            "name": "calculatedStatementDescriptor",
            "baseName": "calculated_statement_descriptor",
            "type": "string"
        },
        {
            "name": "captured",
            "baseName": "captured",
            "type": "boolean"
        },
        {
            "name": "customer",
            "baseName": "customer",
            "type": "StripeChargeCustomer"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "destination",
            "baseName": "destination",
            "type": "StripeTransferDestination"
        },
        {
            "name": "dispute",
            "baseName": "dispute",
            "type": "StripeIssuingTransactionDispute"
        },
        {
            "name": "disputed",
            "baseName": "disputed",
            "type": "boolean"
        },
        {
            "name": "failureBalanceTransaction",
            "baseName": "failure_balance_transaction",
            "type": "StripeRefundFailureBalanceTransaction"
        },
        {
            "name": "failureCode",
            "baseName": "failure_code",
            "type": "string"
        },
        {
            "name": "failureMessage",
            "baseName": "failure_message",
            "type": "string"
        },
        {
            "name": "fraudDetails",
            "baseName": "fraud_details",
            "type": "StripeChargeFraudDetails"
        },
        {
            "name": "invoice",
            "baseName": "invoice",
            "type": "StripeChargeInvoice"
        },
        {
            "name": "level3",
            "baseName": "level3",
            "type": "ChargeLevel3"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "any"
        },
        {
            "name": "onBehalfOf",
            "baseName": "on_behalf_of",
            "type": "StripeChargeOnBehalfOf"
        },
        {
            "name": "outcome",
            "baseName": "outcome",
            "type": "StripeChargeOutcome"
        },
        {
            "name": "paid",
            "baseName": "paid",
            "type": "boolean"
        },
        {
            "name": "paymentIntent",
            "baseName": "payment_intent",
            "type": "StripeRefundPaymentIntent"
        },
        {
            "name": "paymentMethod",
            "baseName": "payment_method",
            "type": "string"
        },
        {
            "name": "paymentMethodDetails",
            "baseName": "payment_method_details",
            "type": "StripeChargePaymentMethodDetails"
        },
        {
            "name": "radarOptions",
            "baseName": "radar_options",
            "type": "ChargeRadarOptions"
        },
        {
            "name": "receiptEmail",
            "baseName": "receipt_email",
            "type": "string"
        },
        {
            "name": "receiptNumber",
            "baseName": "receipt_number",
            "type": "string"
        },
        {
            "name": "receiptUrl",
            "baseName": "receipt_url",
            "type": "string"
        },
        {
            "name": "review",
            "baseName": "review",
            "type": "StripeChargeReview"
        },
        {
            "name": "shipping",
            "baseName": "shipping",
            "type": "StripeChargeShipping"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "StripeTopupSource"
        },
        {
            "name": "sourceTransfer",
            "baseName": "source_transfer",
            "type": "StripeChargeSourceTransfer"
        },
        {
            "name": "statementDescriptor",
            "baseName": "statement_descriptor",
            "type": "string"
        },
        {
            "name": "statementDescriptorSuffix",
            "baseName": "statement_descriptor_suffix",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "TopupStatus"
        },
        {
            "name": "transfer",
            "baseName": "transfer",
            "type": "StripeTransferReversalTransfer"
        },
        {
            "name": "transferData",
            "baseName": "transfer_data",
            "type": "StripeChargeTransferData"
        },
        {
            "name": "transferGroup",
            "baseName": "transfer_group",
            "type": "string"
        },
        {
            "name": "balanceTransactions",
            "baseName": "balance_transactions",
            "type": "Array<StripeBalanceTransaction>"
        },
        {
            "name": "evidence",
            "baseName": "evidence",
            "type": "DisputeEvidence"
        },
        {
            "name": "evidenceDetails",
            "baseName": "evidence_details",
            "type": "DisputeEvidenceDetails"
        },
        {
            "name": "isChargeRefundable",
            "baseName": "is_charge_refundable",
            "type": "boolean"
        },
        {
            "name": "networkReasonCode",
            "baseName": "network_reason_code",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "RefundReason"
        },
        {
            "name": "fee",
            "baseName": "fee",
            "type": "StripeFeeRefundFee"
        },
        {
            "name": "amountDetails",
            "baseName": "amount_details",
            "type": "StripeIssuingTransactionAmountDetails"
        },
        {
            "name": "approved",
            "baseName": "approved",
            "type": "boolean"
        },
        {
            "name": "authorizationMethod",
            "baseName": "authorization_method",
            "type": "AuthorizationAuthorizationMethod"
        },
        {
            "name": "card",
            "baseName": "card",
            "type": "StripeIssuingTransactionCard"
        },
        {
            "name": "cardholder",
            "baseName": "cardholder",
            "type": "StripeIssuingTransactionCardholder"
        },
        {
            "name": "merchantAmount",
            "baseName": "merchant_amount",
            "type": "number"
        },
        {
            "name": "merchantCurrency",
            "baseName": "merchant_currency",
            "type": "string"
        },
        {
            "name": "merchantData",
            "baseName": "merchant_data",
            "type": "TransactionMerchantData"
        },
        {
            "name": "networkData",
            "baseName": "network_data",
            "type": "StripeIssuingAuthorizationNetworkData"
        },
        {
            "name": "pendingRequest",
            "baseName": "pending_request",
            "type": "StripeIssuingAuthorizationPendingRequest"
        },
        {
            "name": "requestHistory",
            "baseName": "request_history",
            "type": "Array<AuthorizationRequestHistory>"
        },
        {
            "name": "transactions",
            "baseName": "transactions",
            "type": "Array<StripeIssuingTransaction>"
        },
        {
            "name": "treasury",
            "baseName": "treasury",
            "type": "StripeIssuingTransactionTreasury"
        },
        {
            "name": "verificationData",
            "baseName": "verification_data",
            "type": "AuthorizationVerificationData"
        },
        {
            "name": "wallet",
            "baseName": "wallet",
            "type": "TransactionWallet"
        },
        {
            "name": "transaction",
            "baseName": "transaction",
            "type": "StripeIssuingDisputeTransaction"
        },
        {
            "name": "authorization",
            "baseName": "authorization",
            "type": "StripeIssuingTransactionAuthorization"
        },
        {
            "name": "purchaseDetails",
            "baseName": "purchase_details",
            "type": "StripeIssuingTransactionPurchaseDetails"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "arrivalDate",
            "baseName": "arrival_date",
            "type": "number"
        },
        {
            "name": "automatic",
            "baseName": "automatic",
            "type": "boolean"
        },
        {
            "name": "method",
            "baseName": "method",
            "type": "string"
        },
        {
            "name": "originalPayout",
            "baseName": "original_payout",
            "type": "StripePayoutOriginalPayout"
        },
        {
            "name": "reversedBy",
            "baseName": "reversed_by",
            "type": "StripePayoutReversedBy"
        },
        {
            "name": "sourceType",
            "baseName": "source_type",
            "type": "string"
        },
        {
            "name": "sourceTransaction",
            "baseName": "source_transaction",
            "type": "StripeTransferSourceTransaction"
        },
        {
            "name": "failureReason",
            "baseName": "failure_reason",
            "type": "string"
        },
        {
            "name": "instructionsEmail",
            "baseName": "instructions_email",
            "type": "string"
        },
        {
            "name": "nextAction",
            "baseName": "next_action",
            "type": "RefundNextAction"
        },
        {
            "name": "sourceTransferReversal",
            "baseName": "source_transfer_reversal",
            "type": "StripeRefundSourceTransferReversal"
        },
        {
            "name": "transferReversal",
            "baseName": "transfer_reversal",
            "type": "StripeRefundTransferReversal"
        },
        {
            "name": "periodEnd",
            "baseName": "period_end",
            "type": "number"
        },
        {
            "name": "periodStart",
            "baseName": "period_start",
            "type": "number"
        },
        {
            "name": "taxDeductionAccountNumber",
            "baseName": "tax_deduction_account_number",
            "type": "string"
        },
        {
            "name": "expectedAvailabilityDate",
            "baseName": "expected_availability_date",
            "type": "number"
        },
        {
            "name": "amountReversed",
            "baseName": "amount_reversed",
            "type": "number"
        },
        {
            "name": "destinationPayment",
            "baseName": "destination_payment",
            "type": "StripeTransferDestinationPayment"
        },
        {
            "name": "reversals",
            "baseName": "reversals",
            "type": "ApiListStripeTransferReversal"
        },
        {
            "name": "reversed",
            "baseName": "reversed",
            "type": "boolean"
        },
        {
            "name": "destinationPaymentRefund",
            "baseName": "destination_payment_refund",
            "type": "StripeTransferReversalDestinationPaymentRefund"
        },
        {
            "name": "sourceRefund",
            "baseName": "source_refund",
            "type": "StripeTransferReversalSourceRefund"
        }    ];

    static getAttributeTypeMap() {
        return StripeBalanceTransactionSource.attributeTypeMap;
    }
}

export namespace StripeBalanceTransactionSource {
    export enum ObjectEnum {
        TRANSFER_REVERSAL = <any> 'transfer_reversal'
    }
}
