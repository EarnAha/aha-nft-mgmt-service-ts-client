/**
 * aha-nft-mgmt-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ChargeAlternateStatementDescriptors } from './chargeAlternateStatementDescriptors';
import { ChargeBillingDetails } from './chargeBillingDetails';
import { ChargeLevel3 } from './chargeLevel3';
import { ChargeRadarOptions } from './chargeRadarOptions';
import { ChargeStatus } from './chargeStatus';
import { StripeCharge } from './stripeCharge';
import { StripeChargeApplication } from './stripeChargeApplication';
import { StripeChargeApplicationFee } from './stripeChargeApplicationFee';
import { StripeChargeBalanceTransaction } from './stripeChargeBalanceTransaction';
import { StripeChargeCustomer } from './stripeChargeCustomer';
import { StripeChargeDestination } from './stripeChargeDestination';
import { StripeChargeDispute } from './stripeChargeDispute';
import { StripeChargeFailureBalanceTransaction } from './stripeChargeFailureBalanceTransaction';
import { StripeChargeFraudDetails } from './stripeChargeFraudDetails';
import { StripeChargeInvoice } from './stripeChargeInvoice';
import { StripeChargeOnBehalfOf } from './stripeChargeOnBehalfOf';
import { StripeChargeOutcome } from './stripeChargeOutcome';
import { StripeChargePaymentIntent } from './stripeChargePaymentIntent';
import { StripeChargePaymentMethodDetails } from './stripeChargePaymentMethodDetails';
import { StripeChargeRefunds } from './stripeChargeRefunds';
import { StripeChargeReview } from './stripeChargeReview';
import { StripeChargeShipping } from './stripeChargeShipping';
import { StripeChargeSource } from './stripeChargeSource';
import { StripeChargeSourceTransfer } from './stripeChargeSourceTransfer';
import { StripeChargeTransfer } from './stripeChargeTransfer';
import { StripeChargeTransferData } from './stripeChargeTransferData';

/**
* ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter.
*/
export class StripeApplicationFeeOriginatingTransaction {
    /**
    * Unique identifier for the object.
    */
    'id': string;
    /**
    * String representing the object\'s type. Objects of the same type share the same value.
    */
    'object': StripeApplicationFeeOriginatingTransaction.ObjectEnum;
    'alternateStatementDescriptors'?: ChargeAlternateStatementDescriptors;
    /**
    * Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    */
    'amount': number;
    /**
    * Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made).
    */
    'amountCaptured': number;
    /**
    * Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued).
    */
    'amountRefunded': number;
    'application': StripeChargeApplication | null;
    'applicationFee': StripeChargeApplicationFee | null;
    /**
    * The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
    */
    'applicationFeeAmount': number | null;
    /**
    * Authorization code on the charge.
    */
    'authorizationCode'?: string;
    'balanceTransaction': StripeChargeBalanceTransaction | null;
    'billingDetails': ChargeBillingDetails;
    /**
    * The full statement descriptor that is passed to card networks, and that is displayed on your customers\' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.
    */
    'calculatedStatementDescriptor': string | null;
    /**
    * If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
    */
    'captured': boolean;
    /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    */
    'created': number;
    /**
    * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    */
    'currency': string;
    'customer': StripeChargeCustomer | null;
    /**
    * An arbitrary string attached to the object. Often useful for displaying to users.
    */
    'description': string | null;
    'destination': StripeChargeDestination | null;
    'dispute': StripeChargeDispute | null;
    /**
    * Whether the charge has been disputed.
    */
    'disputed': boolean;
    'failureBalanceTransaction': StripeChargeFailureBalanceTransaction | null;
    /**
    * Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/error-codes) for a list of codes).
    */
    'failureCode': string | null;
    /**
    * Message to user further explaining reason for charge failure if available.
    */
    'failureMessage': string | null;
    'fraudDetails': StripeChargeFraudDetails | null;
    'invoice': StripeChargeInvoice | null;
    'level3'?: ChargeLevel3;
    /**
    * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    */
    'livemode': boolean;
    /**
    * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    */
    'metadata': { [key: string]: string; };
    'onBehalfOf': StripeChargeOnBehalfOf | null;
    'outcome': StripeChargeOutcome | null;
    /**
    * `true` if the charge succeeded, or was successfully authorized for later capture.
    */
    'paid': boolean;
    'paymentIntent': StripeChargePaymentIntent | null;
    /**
    * ID of the payment method used in this charge.
    */
    'paymentMethod': string | null;
    'paymentMethodDetails': StripeChargePaymentMethodDetails | null;
    'radarOptions'?: ChargeRadarOptions;
    /**
    * This is the email address that the receipt for this charge was sent to.
    */
    'receiptEmail': string | null;
    /**
    * This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.
    */
    'receiptNumber': string | null;
    /**
    * This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
    */
    'receiptUrl': string | null;
    /**
    * Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
    */
    'refunded': boolean;
    'refunds': StripeChargeRefunds | null;
    'review': StripeChargeReview | null;
    'shipping': StripeChargeShipping | null;
    'source': StripeChargeSource | null;
    'sourceTransfer': StripeChargeSourceTransfer | null;
    /**
    * For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers\' statements. Must contain at least one letter, maximum 22 characters.
    */
    'statementDescriptor': string | null;
    /**
    * Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that\'s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    */
    'statementDescriptorSuffix': string | null;
    'status': ChargeStatus;
    'transfer'?: StripeChargeTransfer;
    'transferData': StripeChargeTransferData | null;
    /**
    * A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
    */
    'transferGroup': string | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "object",
            "baseName": "object",
            "type": "StripeApplicationFeeOriginatingTransaction.ObjectEnum"
        },
        {
            "name": "alternateStatementDescriptors",
            "baseName": "alternate_statement_descriptors",
            "type": "ChargeAlternateStatementDescriptors"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "amountCaptured",
            "baseName": "amount_captured",
            "type": "number"
        },
        {
            "name": "amountRefunded",
            "baseName": "amount_refunded",
            "type": "number"
        },
        {
            "name": "application",
            "baseName": "application",
            "type": "StripeChargeApplication"
        },
        {
            "name": "applicationFee",
            "baseName": "application_fee",
            "type": "StripeChargeApplicationFee"
        },
        {
            "name": "applicationFeeAmount",
            "baseName": "application_fee_amount",
            "type": "number"
        },
        {
            "name": "authorizationCode",
            "baseName": "authorization_code",
            "type": "string"
        },
        {
            "name": "balanceTransaction",
            "baseName": "balance_transaction",
            "type": "StripeChargeBalanceTransaction"
        },
        {
            "name": "billingDetails",
            "baseName": "billing_details",
            "type": "ChargeBillingDetails"
        },
        {
            "name": "calculatedStatementDescriptor",
            "baseName": "calculated_statement_descriptor",
            "type": "string"
        },
        {
            "name": "captured",
            "baseName": "captured",
            "type": "boolean"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "number"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "customer",
            "baseName": "customer",
            "type": "StripeChargeCustomer"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "destination",
            "baseName": "destination",
            "type": "StripeChargeDestination"
        },
        {
            "name": "dispute",
            "baseName": "dispute",
            "type": "StripeChargeDispute"
        },
        {
            "name": "disputed",
            "baseName": "disputed",
            "type": "boolean"
        },
        {
            "name": "failureBalanceTransaction",
            "baseName": "failure_balance_transaction",
            "type": "StripeChargeFailureBalanceTransaction"
        },
        {
            "name": "failureCode",
            "baseName": "failure_code",
            "type": "string"
        },
        {
            "name": "failureMessage",
            "baseName": "failure_message",
            "type": "string"
        },
        {
            "name": "fraudDetails",
            "baseName": "fraud_details",
            "type": "StripeChargeFraudDetails"
        },
        {
            "name": "invoice",
            "baseName": "invoice",
            "type": "StripeChargeInvoice"
        },
        {
            "name": "level3",
            "baseName": "level3",
            "type": "ChargeLevel3"
        },
        {
            "name": "livemode",
            "baseName": "livemode",
            "type": "boolean"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "onBehalfOf",
            "baseName": "on_behalf_of",
            "type": "StripeChargeOnBehalfOf"
        },
        {
            "name": "outcome",
            "baseName": "outcome",
            "type": "StripeChargeOutcome"
        },
        {
            "name": "paid",
            "baseName": "paid",
            "type": "boolean"
        },
        {
            "name": "paymentIntent",
            "baseName": "payment_intent",
            "type": "StripeChargePaymentIntent"
        },
        {
            "name": "paymentMethod",
            "baseName": "payment_method",
            "type": "string"
        },
        {
            "name": "paymentMethodDetails",
            "baseName": "payment_method_details",
            "type": "StripeChargePaymentMethodDetails"
        },
        {
            "name": "radarOptions",
            "baseName": "radar_options",
            "type": "ChargeRadarOptions"
        },
        {
            "name": "receiptEmail",
            "baseName": "receipt_email",
            "type": "string"
        },
        {
            "name": "receiptNumber",
            "baseName": "receipt_number",
            "type": "string"
        },
        {
            "name": "receiptUrl",
            "baseName": "receipt_url",
            "type": "string"
        },
        {
            "name": "refunded",
            "baseName": "refunded",
            "type": "boolean"
        },
        {
            "name": "refunds",
            "baseName": "refunds",
            "type": "StripeChargeRefunds"
        },
        {
            "name": "review",
            "baseName": "review",
            "type": "StripeChargeReview"
        },
        {
            "name": "shipping",
            "baseName": "shipping",
            "type": "StripeChargeShipping"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "StripeChargeSource"
        },
        {
            "name": "sourceTransfer",
            "baseName": "source_transfer",
            "type": "StripeChargeSourceTransfer"
        },
        {
            "name": "statementDescriptor",
            "baseName": "statement_descriptor",
            "type": "string"
        },
        {
            "name": "statementDescriptorSuffix",
            "baseName": "statement_descriptor_suffix",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "ChargeStatus"
        },
        {
            "name": "transfer",
            "baseName": "transfer",
            "type": "StripeChargeTransfer"
        },
        {
            "name": "transferData",
            "baseName": "transfer_data",
            "type": "StripeChargeTransferData"
        },
        {
            "name": "transferGroup",
            "baseName": "transfer_group",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return StripeApplicationFeeOriginatingTransaction.attributeTypeMap;
    }
}

export namespace StripeApplicationFeeOriginatingTransaction {
    export enum ObjectEnum {
        CHARGE = <any> 'charge'
    }
}
