/**
 * aha-nft-mgmt-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { AuthorizationAuthorizationMethod } from './authorizationAuthorizationMethod';
import { AuthorizationMerchantData } from './authorizationMerchantData';
import { AuthorizationRequestHistory } from './authorizationRequestHistory';
import { AuthorizationStatus } from './authorizationStatus';
import { AuthorizationVerificationData } from './authorizationVerificationData';
import { StripeBalanceTransaction } from './stripeBalanceTransaction';
import { StripeIssuingAuthorization } from './stripeIssuingAuthorization';
import { StripeIssuingAuthorizationAmountDetails } from './stripeIssuingAuthorizationAmountDetails';
import { StripeIssuingAuthorizationCardholder } from './stripeIssuingAuthorizationCardholder';
import { StripeIssuingAuthorizationNetworkData } from './stripeIssuingAuthorizationNetworkData';
import { StripeIssuingAuthorizationPendingRequest } from './stripeIssuingAuthorizationPendingRequest';
import { StripeIssuingAuthorizationTreasury } from './stripeIssuingAuthorizationTreasury';
import { StripeIssuingCard } from './stripeIssuingCard';
import { StripeIssuingTransaction } from './stripeIssuingTransaction';

/**
* The `Authorization` object that led to this transaction.
*/
export class StripeIssuingTransactionAuthorization {
    /**
    * Unique identifier for the object.
    */
    'id': string;
    /**
    * String representing the object\'s type. Objects of the same type share the same value.
    */
    'object': StripeIssuingTransactionAuthorization.ObjectEnum;
    /**
    * The total amount that was authorized or rejected. This amount is in the card\'s currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    */
    'amount': number;
    'amountDetails': StripeIssuingAuthorizationAmountDetails | null;
    /**
    * Whether the authorization has been approved.
    */
    'approved': boolean;
    'authorizationMethod': AuthorizationAuthorizationMethod;
    /**
    * List of balance transactions associated with this authorization.
    */
    'balanceTransactions': Array<StripeBalanceTransaction>;
    'card': StripeIssuingCard;
    'cardholder': StripeIssuingAuthorizationCardholder | null;
    /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    */
    'created': number;
    /**
    * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    */
    'currency': string;
    /**
    * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    */
    'livemode': boolean;
    /**
    * The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    */
    'merchantAmount': number;
    /**
    * The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    */
    'merchantCurrency': string;
    'merchantData': AuthorizationMerchantData;
    /**
    * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    */
    'metadata': { [key: string]: string; };
    'networkData': StripeIssuingAuthorizationNetworkData | null;
    'pendingRequest': StripeIssuingAuthorizationPendingRequest | null;
    /**
    * History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined.
    */
    'requestHistory': Array<AuthorizationRequestHistory>;
    'status': AuthorizationStatus;
    /**
    * List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
    */
    'transactions': Array<StripeIssuingTransaction>;
    'treasury'?: StripeIssuingAuthorizationTreasury | null;
    'verificationData': AuthorizationVerificationData;
    /**
    * The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized.
    */
    'wallet': string | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "object",
            "baseName": "object",
            "type": "StripeIssuingTransactionAuthorization.ObjectEnum"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "amountDetails",
            "baseName": "amount_details",
            "type": "StripeIssuingAuthorizationAmountDetails"
        },
        {
            "name": "approved",
            "baseName": "approved",
            "type": "boolean"
        },
        {
            "name": "authorizationMethod",
            "baseName": "authorization_method",
            "type": "AuthorizationAuthorizationMethod"
        },
        {
            "name": "balanceTransactions",
            "baseName": "balance_transactions",
            "type": "Array<StripeBalanceTransaction>"
        },
        {
            "name": "card",
            "baseName": "card",
            "type": "StripeIssuingCard"
        },
        {
            "name": "cardholder",
            "baseName": "cardholder",
            "type": "StripeIssuingAuthorizationCardholder"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "number"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "livemode",
            "baseName": "livemode",
            "type": "boolean"
        },
        {
            "name": "merchantAmount",
            "baseName": "merchant_amount",
            "type": "number"
        },
        {
            "name": "merchantCurrency",
            "baseName": "merchant_currency",
            "type": "string"
        },
        {
            "name": "merchantData",
            "baseName": "merchant_data",
            "type": "AuthorizationMerchantData"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "networkData",
            "baseName": "network_data",
            "type": "StripeIssuingAuthorizationNetworkData"
        },
        {
            "name": "pendingRequest",
            "baseName": "pending_request",
            "type": "StripeIssuingAuthorizationPendingRequest"
        },
        {
            "name": "requestHistory",
            "baseName": "request_history",
            "type": "Array<AuthorizationRequestHistory>"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "AuthorizationStatus"
        },
        {
            "name": "transactions",
            "baseName": "transactions",
            "type": "Array<StripeIssuingTransaction>"
        },
        {
            "name": "treasury",
            "baseName": "treasury",
            "type": "StripeIssuingAuthorizationTreasury"
        },
        {
            "name": "verificationData",
            "baseName": "verification_data",
            "type": "AuthorizationVerificationData"
        },
        {
            "name": "wallet",
            "baseName": "wallet",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return StripeIssuingTransactionAuthorization.attributeTypeMap;
    }
}

export namespace StripeIssuingTransactionAuthorization {
    export enum ObjectEnum {
        ISSUING_AUTHORIZATION = <any> 'issuing.authorization'
    }
}
