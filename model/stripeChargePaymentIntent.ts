/**
 * aha-nft-mgmt-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { PaymentIntentAmountDetails } from './paymentIntentAmountDetails';
import { PaymentIntentCancellationReason } from './paymentIntentCancellationReason';
import { PaymentIntentCaptureMethod } from './paymentIntentCaptureMethod';
import { PaymentIntentConfirmationMethod } from './paymentIntentConfirmationMethod';
import { PaymentIntentSetupFutureUsage } from './paymentIntentSetupFutureUsage';
import { PaymentIntentStatus } from './paymentIntentStatus';
import { StripePaymentIntent } from './stripePaymentIntent';
import { StripePaymentIntentApplication } from './stripePaymentIntentApplication';
import { StripePaymentIntentAutomaticPaymentMethods } from './stripePaymentIntentAutomaticPaymentMethods';
import { StripePaymentIntentCustomer } from './stripePaymentIntentCustomer';
import { StripePaymentIntentInvoice } from './stripePaymentIntentInvoice';
import { StripePaymentIntentLastPaymentError } from './stripePaymentIntentLastPaymentError';
import { StripePaymentIntentLatestCharge } from './stripePaymentIntentLatestCharge';
import { StripePaymentIntentNextAction } from './stripePaymentIntentNextAction';
import { StripePaymentIntentOnBehalfOf } from './stripePaymentIntentOnBehalfOf';
import { StripePaymentIntentPaymentMethod } from './stripePaymentIntentPaymentMethod';
import { StripePaymentIntentPaymentMethodOptions } from './stripePaymentIntentPaymentMethodOptions';
import { StripePaymentIntentProcessing } from './stripePaymentIntentProcessing';
import { StripePaymentIntentReview } from './stripePaymentIntentReview';
import { StripePaymentIntentShipping } from './stripePaymentIntentShipping';
import { StripePaymentIntentSource } from './stripePaymentIntentSource';
import { StripePaymentIntentTransferData } from './stripePaymentIntentTransferData';

/**
* ID of the PaymentIntent associated with this charge, if one exists.
*/
export class StripeChargePaymentIntent {
    /**
    * Unique identifier for the object.
    */
    'id': string;
    /**
    * String representing the object\'s type. Objects of the same type share the same value.
    */
    'object': StripeChargePaymentIntent.ObjectEnum;
    /**
    * Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    */
    'amount': number;
    /**
    * Amount that can be captured from this PaymentIntent.
    */
    'amountCapturable': number;
    'amountDetails'?: PaymentIntentAmountDetails;
    /**
    * Amount that was collected by this PaymentIntent.
    */
    'amountReceived': number;
    'application': StripePaymentIntentApplication | null;
    /**
    * The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner\'s Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    */
    'applicationFeeAmount': number | null;
    'automaticPaymentMethods': StripePaymentIntentAutomaticPaymentMethods | null;
    /**
    * Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
    */
    'canceledAt': number | null;
    /**
    * Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).
    */
    'cancellationReason': PaymentIntentCancellationReason | null;
    'captureMethod': PaymentIntentCaptureMethod;
    /**
    * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.  The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.  Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
    */
    'clientSecret': string | null;
    'confirmationMethod': PaymentIntentConfirmationMethod;
    /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    */
    'created': number;
    /**
    * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    */
    'currency': string;
    'customer': StripePaymentIntentCustomer | null;
    /**
    * An arbitrary string attached to the object. Often useful for displaying to users.
    */
    'description': string | null;
    'invoice': StripePaymentIntentInvoice | null;
    'lastPaymentError': StripePaymentIntentLastPaymentError | null;
    'latestCharge'?: StripePaymentIntentLatestCharge | null;
    /**
    * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    */
    'livemode': boolean;
    /**
    * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    */
    'metadata': { [key: string]: string; };
    'nextAction': StripePaymentIntentNextAction | null;
    'onBehalfOf': StripePaymentIntentOnBehalfOf | null;
    'paymentMethod': StripePaymentIntentPaymentMethod | null;
    'paymentMethodOptions': StripePaymentIntentPaymentMethodOptions | null;
    /**
    * The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.
    */
    'paymentMethodTypes': Array<string>;
    'processing': StripePaymentIntentProcessing | null;
    /**
    * Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
    */
    'receiptEmail': string | null;
    'review': StripePaymentIntentReview | null;
    /**
    * Indicates that you intend to make future payments with this PaymentIntent\'s payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent\'s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
    */
    'setupFutureUsage': PaymentIntentSetupFutureUsage | null;
    'shipping': StripePaymentIntentShipping | null;
    'source': StripePaymentIntentSource | null;
    /**
    * For non-card charges, you can use this value as the complete description that appears on your customers\' statements. Must contain at least one letter, maximum 22 characters.
    */
    'statementDescriptor': string | null;
    /**
    * Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that\'s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    */
    'statementDescriptorSuffix': string | null;
    'status': PaymentIntentStatus;
    'transferData': StripePaymentIntentTransferData | null;
    /**
    * A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
    */
    'transferGroup': string | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "object",
            "baseName": "object",
            "type": "StripeChargePaymentIntent.ObjectEnum"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "amountCapturable",
            "baseName": "amount_capturable",
            "type": "number"
        },
        {
            "name": "amountDetails",
            "baseName": "amount_details",
            "type": "PaymentIntentAmountDetails"
        },
        {
            "name": "amountReceived",
            "baseName": "amount_received",
            "type": "number"
        },
        {
            "name": "application",
            "baseName": "application",
            "type": "StripePaymentIntentApplication"
        },
        {
            "name": "applicationFeeAmount",
            "baseName": "application_fee_amount",
            "type": "number"
        },
        {
            "name": "automaticPaymentMethods",
            "baseName": "automatic_payment_methods",
            "type": "StripePaymentIntentAutomaticPaymentMethods"
        },
        {
            "name": "canceledAt",
            "baseName": "canceled_at",
            "type": "number"
        },
        {
            "name": "cancellationReason",
            "baseName": "cancellation_reason",
            "type": "PaymentIntentCancellationReason"
        },
        {
            "name": "captureMethod",
            "baseName": "capture_method",
            "type": "PaymentIntentCaptureMethod"
        },
        {
            "name": "clientSecret",
            "baseName": "client_secret",
            "type": "string"
        },
        {
            "name": "confirmationMethod",
            "baseName": "confirmation_method",
            "type": "PaymentIntentConfirmationMethod"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "number"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "customer",
            "baseName": "customer",
            "type": "StripePaymentIntentCustomer"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "invoice",
            "baseName": "invoice",
            "type": "StripePaymentIntentInvoice"
        },
        {
            "name": "lastPaymentError",
            "baseName": "last_payment_error",
            "type": "StripePaymentIntentLastPaymentError"
        },
        {
            "name": "latestCharge",
            "baseName": "latest_charge",
            "type": "StripePaymentIntentLatestCharge"
        },
        {
            "name": "livemode",
            "baseName": "livemode",
            "type": "boolean"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "nextAction",
            "baseName": "next_action",
            "type": "StripePaymentIntentNextAction"
        },
        {
            "name": "onBehalfOf",
            "baseName": "on_behalf_of",
            "type": "StripePaymentIntentOnBehalfOf"
        },
        {
            "name": "paymentMethod",
            "baseName": "payment_method",
            "type": "StripePaymentIntentPaymentMethod"
        },
        {
            "name": "paymentMethodOptions",
            "baseName": "payment_method_options",
            "type": "StripePaymentIntentPaymentMethodOptions"
        },
        {
            "name": "paymentMethodTypes",
            "baseName": "payment_method_types",
            "type": "Array<string>"
        },
        {
            "name": "processing",
            "baseName": "processing",
            "type": "StripePaymentIntentProcessing"
        },
        {
            "name": "receiptEmail",
            "baseName": "receipt_email",
            "type": "string"
        },
        {
            "name": "review",
            "baseName": "review",
            "type": "StripePaymentIntentReview"
        },
        {
            "name": "setupFutureUsage",
            "baseName": "setup_future_usage",
            "type": "PaymentIntentSetupFutureUsage"
        },
        {
            "name": "shipping",
            "baseName": "shipping",
            "type": "StripePaymentIntentShipping"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "StripePaymentIntentSource"
        },
        {
            "name": "statementDescriptor",
            "baseName": "statement_descriptor",
            "type": "string"
        },
        {
            "name": "statementDescriptorSuffix",
            "baseName": "statement_descriptor_suffix",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "PaymentIntentStatus"
        },
        {
            "name": "transferData",
            "baseName": "transfer_data",
            "type": "StripePaymentIntentTransferData"
        },
        {
            "name": "transferGroup",
            "baseName": "transfer_group",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return StripeChargePaymentIntent.attributeTypeMap;
    }
}

export namespace StripeChargePaymentIntent {
    export enum ObjectEnum {
        PAYMENT_INTENT = <any> 'payment_intent'
    }
}
